{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a box plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5, 6, 7, 8, 9]})\nplt.boxplot(df['x'])\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to perform a linear regression analysis using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 4, 5]})\nX = df[['x']]\ny = df['y']\nmodel = LinearRegression().fit(X, y)\nprint('Intercept:', model.intercept_)\nprint('Slope:', model.coef_)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to filter rows based on a column value?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': ['A', 'B', 'C', 'D', 'E']})\nfiltered_df = df[df['col1'] > 2]\nprint(filtered_df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to create a pivot table in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to create a heatmap using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.heatmap(df, annot=True)\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to create a violin plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = sns.load_dataset('tips')\nsns.violinplot(x='day', y='total_bill', data=df)\nplt.show()\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to create a scatter plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to perform K-means clustering using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 1, 2, 2, 3]})\nmodel = KMeans(n_clusters=2).fit(df)\nprint(model.labels_)\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to create a complex subplot layout using Matplotlib?", "output": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 400)\ny = np.sin(x**2)\nax[0, 0].plot(x, y)\nax[0, 1].plot(x, y, 'tab:orange')\nax[1, 0].plot(x, -y, 'tab:green')\nax[1, 1].plot(x, -y, 'tab:red')\nplt.show()\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to use groupby function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\ngrouped = df.groupby('A').sum()\nprint(grouped)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to select specific columns from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\nselected_df = df[['col1']]\nprint(selected_df)\n```"}
{"input": "How to use pivot_table function in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to plot a line graph using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to plot a confusion matrix using Seaborn?", "output": "```python\nimport pandas as pd\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrue_labels = [1, 0, 1, 0, 1, 1, 0, 0]\npred_labels = [1, 0, 1, 1, 0, 1, 0, 0]\ncm = confusion_matrix(true_labels, pred_labels)\nsns.heatmap(cm, annot=True)\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to add a title and labels to a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.title('Line Graph')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to create a new dataframe from a dictionary?", "output": "```python\nimport pandas as pd\ndata = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to create a bar plot using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': ['A', 'B', 'C'], 'y': [1, 2, 3]})\nplt.bar(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to sort a dataframe by a single column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [2, 1, 4, 3, 5]})\nsorted_df = df.sort_values(by='col1')\nprint(sorted_df)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to create a dataframe from a list of dictionaries?", "output": "```python\nimport pandas as pd\ndata = [{'col1': 1, 'col2': 2}, {'col1': 3, 'col2': 4}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}
{"input": "How to use pivot tables in pandas?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': ['one', 'two', 'one', 'two'], 'C': [1, 3, 2, 4]})\npivot_table = pd.pivot_table(df, values='C', index='A', columns='B', aggfunc='sum')\nprint(pivot_table)\n```"}
{"input": "How to create subplots in Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfig, (ax1, ax2) = plt.subplots(1, 2)\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nax1.plot(df['x'], df['y'])\nax2.scatter(df['x'], df['y'])\nplt.show()\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to change the data type of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['1', '2', '3']})\ndf['col1'] = df['col1'].astype(int)\nprint(df)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to add a new column to a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf['col2'] = [4, 5, 6]\nprint(df)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to merge two dataframes on a common column?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'key': ['A', 'B', 'C'], 'col1': [1, 2, 3]})\ndf2 = pd.DataFrame({'key': ['A', 'B', 'D'], 'col2': [4, 5, 6]})\nmerged_df = pd.merge(df1, df2, on='key')\nprint(merged_df)\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to implement decision trees using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 1, 0, 1, 0]})\nX = df[['x']]\ny = df['y']\nclf = DecisionTreeClassifier().fit(X, y)\nprint(clf.predict(X))\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to check for missing values in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, None, 4, 5]})\nprint(df.isnull().sum())\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to remove duplicate rows from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 2, 4], 'B': [1, 2, 2, 4]})\ndf_cleaned = df.drop_duplicates()\nprint(df_cleaned)\n```"}
{"input": "How to rename columns in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.rename(columns={'col1': 'new_col1', 'col2': 'new_col2'}, inplace=True)\nprint(df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to filter dataframe rows using a custom function?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nfiltered_df = df[df['col1'].apply(lambda x: x > 2)]\nprint(filtered_df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to perform logistic regression using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nmodel = LogisticRegression().fit(X, y)\nprint(model.predict(X))\n```"}
{"input": "How to create a custom aggregation function in pandas?", "output": "```python\nimport pandas as pd\ndef custom_agg(x):\nreturn x.max() - x.min()\ndf = pd.DataFrame({'A': ['foo', 'foo', 'bar', 'bar'], 'B': [1, 2, 3, 4]})\ngrouped = df.groupby('A').agg(custom_agg)\nprint(grouped)\n```"}
{"input": "How to apply a custom function to a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x * 2)\nprint(df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to perform sentiment analysis using VADER?", "output": "```python\nimport pandas as pd\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\ndf = pd.DataFrame({'text': ['I love this!', 'This is bad.']})\nanalyzer = SentimentIntensityAnalyzer()\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])\nprint(df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to normalize a dataframe column?", "output": "```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nscaler = MinMaxScaler()\ndf['col1_normalized'] = scaler.fit_transform(df[['col1']])\nprint(df)\n```"}
{"input": "How to split data into training and testing sets?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5], 'col2': [5, 4, 3, 2, 1]})\ntrain, test = train_test_split(df, test_size=0.2)\nprint('Train Set:\n', train)\nprint('Test Set:\n', test)\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to calculate the mean of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nmean_val = df['col1'].mean()\nprint(mean_val)\n```"}
{"input": "How to create a dataframe with a date range index?", "output": "```python\nimport pandas as pd\ndates = pd.date_range('20220101', periods=6)\ndf = pd.DataFrame({'col1': range(6)}, index=dates)\nprint(df)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to perform a time series analysis using pandas?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.date_range(start='1/1/2020', periods=100, freq='D').to_frame(index=False, name='date')\ndf['value'] = np.random.randint(0, 100, size=(100,))\ndf.set_index('date', inplace=True)\nprint(df.resample('M').mean())\n```"}
{"input": "How to reset the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3]})\ndf.reset_index(drop=True, inplace=True)\nprint(df)\n```"}
{"input": "How to perform a grid search for hyperparameter tuning using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [0, 0, 1, 1, 1]})\nX = df[['x']]\ny = df['y']\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}\ngrid = GridSearchCV(SVC(), param_grid, refit=True)\ngrid.fit(X, y)\nprint(grid.best_params_)\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to create a histogram of a dataframe column using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]})\ndf['col1'].hist()\nplt.show()\n```"}
{"input": "How to use the seaborn library for data visualization?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to perform a principal component analysis (PCA) using Scikit-Learn?", "output": "```python\nimport pandas as pd\nfrom sklearn.decomposition import PCA\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [5, 4, 3, 2, 1]})\npca = PCA(n_components=1)\nprincipalComponents = pca.fit_transform(df)\nprint(principalComponents)\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to create a time series plot using Seaborn?", "output": "```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'x': pd.date_range(start='1/1/2020', periods=100, freq='D'), 'y': np.random.randn(100).cumsum()})\nsns.lineplot(x='x', y='y', data=df)\nplt.show()\n```"}
{"input": "How to read a CSV file into a pandas dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.read_csv('filename.csv')\nprint(df.head())\n```"}
{"input": "How to create a pair plot using Seaborn?", "output": "```python\nimport pandas as pd\nimport seaborn as sns\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\nsns.pairplot(df)\nplt.show()\n```"}
{"input": "How to customize the line style in a Matplotlib plot?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'], linestyle='dashed')\nplt.show()\n```"}
{"input": "How to concatenate two dataframes along rows or columns?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']})\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7']})\nresult = pd.concat([df1, df2])\nprint(result)\n```"}
{"input": "How to concatenate two dataframes along rows?", "output": "```python\nimport pandas as pd\ndf1 = pd.DataFrame({'A': [1, 2]})\ndf2 = pd.DataFrame({'A': [3, 4]})\nresult = pd.concat([df1, df2], axis=0)\nprint(result)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
{"input": "How to save a plot as an image file using Matplotlib?", "output": "```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.DataFrame({'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]})\nplt.plot(df['x'], df['y'])\nplt.savefig('plot.png')\n```"}
{"input": "How to get basic statistics for a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nprint(df.describe())\n```"}
{"input": "How to apply a function to each element of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\ndf['col2'] = df['col1'].apply(lambda x: x**2)\nprint(df)\n```"}
{"input": "How to calculate the standard deviation of a dataframe column?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 5]})\nstd_dev = df['col1'].std()\nprint(std_dev)\n```"}
{"input": "How to group data by a column and calculate aggregate statistics?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': ['A', 'A', 'B', 'B'], 'col2': [1, 2, 3, 4]})\ngrouped_df = df.groupby('col1').sum()\nprint(grouped_df)\n```"}
{"input": "How to handle missing data in a dataframe?", "output": "```python\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'col1': [1, 2, np.nan, 4, 5]})\nfilled_df = df.fillna(0)\nprint(filled_df)\n```"}
{"input": "How to drop a column from a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\ndf.drop('col2', axis=1, inplace=True)\nprint(df)\n```"}
{"input": "How to set a column as the index of a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\ndf.set_index('col1', inplace=True)\nprint(df)\n```"}
{"input": "How to check the data type of each column in a dataframe?", "output": "```python\nimport pandas as pd\ndf = pd.DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})\nprint(df.dtypes)\n```"}
